# Control Plane GitHub Action

name: Deploy to Control Plane
description: 'Deploys an application to Control Plane'

inputs:
  app_name:
    description: 'Name of the application'
    required: true
  org:
    description: 'Organization name'
    required: true
  github_token:
    description: 'GitHub token'
    required: true
  wait_timeout:
    description: 'Timeout in seconds for waiting for workloads to be ready'
    required: false
    default: '900'

outputs:
  review_app_url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy.outputs.review_app_url }}

runs:
  using: "composite"
  steps:
    - name: Validate Required Secrets
      shell: bash
      run: |
        missing_secrets=()
        for secret in "CPLN_TOKEN" "CPLN_ORG"; do
          if [ -z "${!secret}" ]; then
            missing_secrets+=("$secret")
          fi
        done
        
        if [ ${#missing_secrets[@]} -ne 0 ]; then
          echo "Required secrets are not set: ${missing_secrets[*]}"
          exit 1
        fi

    - name: Setup Environment
      uses: ./.github/actions/setup-environment

    - name: Set shared functions
      id: shared-functions
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('GET_CONSOLE_LINK', `
            function getConsoleLink(prNumber) {
              return ' [Control Plane Console for Review App with PR #' + prNumber + '](' + 
                     'https://console.cpln.io/org/' + process.env.CPLN_ORG + '/workloads/' + process.env.APP_NAME + ')';
            }
          `);

    - name: Initialize Deployment
      id: init-deployment
      uses: actions/github-script@v7
      with:
        script: |
          eval(process.env.GET_CONSOLE_LINK);

          async function getWorkflowUrl(runId) {
            // Get the current job ID
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
            
            const currentJob = jobs.data.jobs.find(job => job.status === 'in_progress');
            const jobId = currentJob?.id;
            
            if (!jobId) {
              console.log('Warning: Could not find current job ID');
              return `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}`;
            }
            
            return `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}/job/${jobId}`;
          }
          
          // Create initial deployment comment
          const comment = await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: process.env.PR_NUMBER,
            body: ' Initializing deployment...'
          });
          
          // Create GitHub deployment
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'review',
            auto_merge: false,
            required_contexts: []
          });

          const workflowUrl = await getWorkflowUrl(context.runId);
          
          core.exportVariable('WORKFLOW_URL', workflowUrl);
          core.exportVariable('COMMENT_ID', comment.data.id);
          core.exportVariable('DEPLOYMENT_ID', deployment.data.id);

    - name: Set commit hash
      shell: bash
      run: |
        FULL_COMMIT=$(git rev-parse HEAD)
        echo "COMMIT_HASH=${FULL_COMMIT:0:7}" >> $GITHUB_ENV

    - name: Update Status - Setting Up
      uses: actions/github-script@v7
      with:
        script: |
          eval(process.env.GET_CONSOLE_LINK);

          const setupMessage = [
            'üîß Setting up Control Plane app...',
            '',
            ' [View Setup Logs](' + process.env.WORKFLOW_URL + ')',
            '',
            getConsoleLink(process.env.PR_NUMBER)
          ].join('\n');
          
          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: process.env.COMMENT_ID,
            body: setupMessage
          });

    - name: Setup Control Plane App
      shell: bash
      run: |
        echo "üîß Checking if app exists..."
        if ! cpflow exists -a ${{ inputs.app_name }} ; then
          echo "üì¶ Setting up new Control Plane app..."
          cpflow setup-app -a ${{ inputs.app_name }}
        fi

    - name: Update Status - Building
      uses: actions/github-script@v7
      with:
        script: |
          eval(process.env.GET_CONSOLE_LINK);

          const buildingMessage = [
            'üèóÔ∏è Building Docker image for PR #' + process.env.PR_NUMBER + ', commit ' + process.env.COMMIT_HASH,
            '',
            ' [View Build Logs](' + process.env.WORKFLOW_URL + ')',
            '',
            getConsoleLink(process.env.PR_NUMBER)
          ].join('\n');
          
          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: process.env.COMMENT_ID,
            body: buildingMessage
          });

    - name: Update Status - Deploying
      uses: actions/github-script@v7
      with:
        script: |
          eval(process.env.GET_CONSOLE_LINK);

          const deployingMessage = [
            'üöÄ Deploying to Control Plane...',
            '',
            '‚è≥ Waiting for deployment to be ready...',
            '',
            ' [View Deploy Logs](' + process.env.WORKFLOW_URL + ')',
            '',
            getConsoleLink(process.env.PR_NUMBER)
          ].join('\n');
          
          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: process.env.COMMENT_ID,
            body: deployingMessage
          });

    - name: Deploy to Control Plane
      id: deploy
      shell: bash
      run: ${{ github.action_path }}/scripts/deploy.sh
      env:
        APP_NAME: ${{ inputs.app_name }}
        CPLN_ORG: ${{ inputs.org }}
        WAIT_TIMEOUT: ${{ inputs.wait_timeout }}

    - name: Update Status - Deployment Complete
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          eval(process.env.GET_CONSOLE_LINK);

          const prNumber = process.env.PR_NUMBER;
          const appUrl = process.env.REVIEW_APP_URL;
          const workflowUrl = process.env.WORKFLOW_URL;
          const isSuccess = '${{ job.status }}' === 'success';
          
          // Create GitHub deployment status
          const deploymentStatus = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: process.env.DEPLOYMENT_ID,
            state: isSuccess ? 'success' : 'failure',
            environment_url: isSuccess ? appUrl : undefined,
            log_url: workflowUrl,
            environment: 'review'
          };
          
          await github.rest.repos.createDeploymentStatus(deploymentStatus);
          
          // Define messages based on deployment status
          const successMessage = [
            '‚úÖ Deployment complete for PR #' + prNumber + ', commit ' + process.env.COMMIT_HASH,
            '',
            'üåê [Review App for PR #' + prNumber + '](' + appUrl + ')',
            '',
            ' [View Completed Action Build and Deploy Logs](' + workflowUrl + ')',
            '',
            getConsoleLink(prNumber)
          ].join('\n');
          
          const failureMessage = [
            '‚ùå Deployment failed for PR #' + prNumber + ', commit ' + process.env.COMMIT_HASH,
            '',
            ' [View Deployment Logs with Errors](' + workflowUrl + ')',
            '',
            getConsoleLink(prNumber)
          ].join('\n');
          
          // Update the existing comment
          await github.rest.issues.updateComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: process.env.COMMENT_ID,
            body: isSuccess ? successMessage : failureMessage
          });
