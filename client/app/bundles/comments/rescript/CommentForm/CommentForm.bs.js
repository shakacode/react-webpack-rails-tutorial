// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Actions from "../Actions/Actions.bs.js";
import * as AlertError from "../CommentList/AlertError/AlertError.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as InlineForm from "./forms/InlineForm.bs.js";
import * as StackedForm from "./forms/StackedForm.bs.js";
import * as HorizontalForm from "./forms/HorizontalForm.bs.js";
import * as JsxRuntime from "react/jsx-runtime";

function reducer(state, action) {
  if (typeof action !== "object") {
    switch (action) {
      case "SetSavingError" :
          return {
                  author: state.author,
                  text: state.text,
                  form: state.form,
                  savingStatus: "Error"
                };
      case "ClearSavingError" :
          return {
                  author: state.author,
                  text: state.text,
                  form: state.form,
                  savingStatus: "Idle"
                };
      case "SetStoreStatusSaving" :
          return {
                  author: state.author,
                  text: state.text,
                  form: state.form,
                  savingStatus: "Saving"
                };
      
    }
  } else {
    switch (action.TAG) {
      case "SetAuthor" :
          return {
                  author: action._0,
                  text: state.text,
                  form: state.form,
                  savingStatus: state.savingStatus
                };
      case "SetText" :
          return {
                  author: state.author,
                  text: action._0,
                  form: state.form,
                  savingStatus: state.savingStatus
                };
      case "SetFormType" :
          return {
                  author: state.author,
                  text: state.text,
                  form: action._0,
                  savingStatus: state.savingStatus
                };
      
    }
  }
}

function CommentForm(props) {
  var fetchData = props.fetchData;
  var match = React.useReducer(reducer, {
        author: "",
        text: "",
        form: "Horizontal",
        savingStatus: "Idle"
      });
  var dispatch = match[1];
  var state = match[0];
  var disabled = React.useMemo((function () {
          var match = state.savingStatus;
          switch (match) {
            case "Saving" :
                return true;
            case "Idle" :
            case "Error" :
                return false;
            
          }
        }), [state.savingStatus]);
  var handleAuthorChange = function ($$event) {
    var value = $$event.currentTarget.value;
    dispatch({
          TAG: "SetAuthor",
          _0: value
        });
  };
  var handleTextChange = function ($$event) {
    var value = $$event.currentTarget.value;
    dispatch({
          TAG: "SetText",
          _0: value
        });
  };
  var handleSubmit = function ($$event) {
    $$event.preventDefault();
    var newComment = {
      author: state.author,
      text: state.text
    };
    dispatch("SetStoreStatusSaving");
    var saveAndFetchComments = async function () {
      try {
        await Actions.Create.storeComment(newComment);
        dispatch("ClearSavingError");
        return await fetchData();
      }
      catch (exn){
        return dispatch("SetSavingError");
      }
    };
    saveAndFetchComments();
  };
  var forms = [
    {
      formName: "Horizontal Form",
      formType: "Horizontal"
    },
    {
      formName: "Inline Form",
      formType: "Inline"
    },
    {
      formName: "Stacked Form",
      formType: "Stacked"
    }
  ];
  var match$1 = state.form;
  var tmp;
  switch (match$1) {
    case "Horizontal" :
        tmp = JsxRuntime.jsx(HorizontalForm.make, {
              author: state.author,
              handleAuthorChange: handleAuthorChange,
              text: state.text,
              handleTextChange: handleTextChange,
              handleSubmit: handleSubmit,
              disabled: disabled
            });
        break;
    case "Inline" :
        tmp = JsxRuntime.jsx(InlineForm.make, {
              author: state.author,
              handleAuthorChange: handleAuthorChange,
              text: state.text,
              handleTextChange: handleTextChange,
              handleSubmit: handleSubmit,
              disabled: disabled
            });
        break;
    case "Stacked" :
        tmp = JsxRuntime.jsx(StackedForm.make, {
              author: state.author,
              handleAuthorChange: handleAuthorChange,
              text: state.text,
              handleTextChange: handleTextChange,
              handleSubmit: handleSubmit,
              disabled: disabled
            });
        break;
    
  }
  var match$2 = state.savingStatus;
  var tmp$1;
  switch (match$2) {
    case "Idle" :
    case "Saving" :
        tmp$1 = null;
        break;
    case "Error" :
        tmp$1 = JsxRuntime.jsx(AlertError.make, {
              errorMsg: "Can't save the comment!"
            });
        break;
    
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("div", {
                      children: Belt_Array.map(forms, (function (form) {
                              return JsxRuntime.jsx("button", {
                                          children: form.formName,
                                          className: "px-6 py-2 font-semibold border-0 rounded " + (
                                            state.form === form.formType ? "text-sky-50 bg-sky-600" : "text-sky-600 hover:bg-gray-100"
                                          ),
                                          onClick: (function ($$event) {
                                              dispatch({
                                                    TAG: "SetFormType",
                                                    _0: form.formType
                                                  });
                                            })
                                        }, "form_" + form.formName);
                            })),
                      className: "flex gap-1 not-prose"
                    }),
                JsxRuntime.jsx("hr", {}),
                tmp,
                tmp$1
              ]
            });
}

var make = CommentForm;

export {
  reducer ,
  make ,
}
/* react Not a pure module */
